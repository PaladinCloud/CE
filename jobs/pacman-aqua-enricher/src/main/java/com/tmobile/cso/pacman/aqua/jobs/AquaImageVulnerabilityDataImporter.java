/*******************************************************************************
 * Copyright 2022 Paladin Cloud, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package com.tmobile.cso.pacman.aqua.jobs;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.tmobile.cso.pacman.aqua.Constants;
import com.tmobile.cso.pacman.aqua.exception.AquaDataImportException;
import com.tmobile.cso.pacman.aqua.util.ElasticSearchManager;
import com.tmobile.cso.pacman.aqua.util.ErrorManageUtil;
import com.tmobile.cso.pacman.aqua.util.HttpUtil;
import com.tmobile.cso.pacman.aqua.util.Util;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AquaImageVulnerabilityDataImporter extends AquaDataImporter {

    private final static Logger log = LoggerFactory.getLogger(AquaImageVulnerabilityDataImporter.class);

    private final static String AQUA_IMAGE_VULNERABILITY = "aqua-image-vulnerability";
    private final static String TYPE = "vulnerability";
    private final static String DOC_ID = "idKey";

    private static List<Map<String, String>> errorList = new ArrayList<>();

    @SuppressWarnings("unchecked")
    public Map<String, Object> execute() {
        try {
            String token = getBearerToken();
            Map<String, Object> errorMap = getAndUploadVulnerabilityDataToES(token);
            return errorMap;
        } catch (AquaDataImportException e) {
            log.error("exception while collecting aqua VM Vulnerability Data", e);
            Map<String, String> errorMap = new HashMap<>();
            errorMap.put(Constants.ERROR, "Error in exception while collecting aqua VM Vulnerability Data");
            errorMap.put(Constants.ERROR_TYPE, Constants.FATAL);
            errorMap.put(Constants.EXCEPTION, e.getMessage());
            errorList.add(errorMap);
        }

        return ErrorManageUtil.formErrorCode(errorList);
    }

    private Map<String, Object> getAndUploadVulnerabilityDataToES(String token) {
        try {
            int currentPage = 1;
            boolean isLastPage = false;
            Gson gson = Util.getJsonBuilder();
            String aquaImageVulQueryParams = System.getProperty("aqua_image_vul_query_params");
            do {
                String pagination = "&page=" + currentPage + "&pagesize=" + getDefaultPageSize();
                String vulnerabilityURI = aquaClientDomainUrl +
                        apiMap.get("image_vulnerabilities") +
                        "?" +
                        aquaImageVulQueryParams +
                        pagination;
                Map<String, Object> response = ((Map<String, Object>) gson.fromJson(HttpUtil.get(vulnerabilityURI, token), Map.class));
                if (null == response || response.isEmpty()) {
                    throw new AquaDataImportException("Failed to fetch or No  vulnerability data found!!!");
                }
                double currentCount = (Double) response.get("page") * (Double) response.get("pagesize");
                if (currentCount >= (Double) response.get("count")) {
                    isLastPage = true;
                }
                synchronized (response) {
                    uploadToES((List<Map<String, Object>>) response.get("result"));
                }
                currentPage++;
            }
            while (!isLastPage);
        } catch (Exception e) {
            log.error("exception while collecting aqua VM Vulnerability Data", e);
            Map<String, String> errorMap = new HashMap<>();
            errorMap.put(Constants.ERROR, "Error in exception while collecting aqua VM Vulnerability Data");
            errorMap.put(Constants.ERROR_TYPE, Constants.FATAL);
            errorMap.put(Constants.EXCEPTION, e.getMessage());
            errorList.add(errorMap);
        }

        return ErrorManageUtil.formErrorCode(errorList);
    }

    private void uploadToES(List<Map<String, Object>> result) throws AquaDataImportException {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd"));
        List<Map<String, Object>> vulnDetails = new ArrayList<>();
        try {
            synchronized (vulnDetails) {
                for (Map<String, Object> res : result) {
                    String idValue = buildIDValue(res);
                    res.putIfAbsent("idKey", idValue);
                    vulnDetails.add(res);
                }
            }
            ElasticSearchManager.createIndex(AQUA_IMAGE_VULNERABILITY);
            ElasticSearchManager.uploadData(AQUA_IMAGE_VULNERABILITY, TYPE, vulnDetails, DOC_ID);
        } catch (Exception e) {
            throw new AquaDataImportException("Failed to Upload Aqua Image Vulnerability data to ES", e);
        }
    }

    private String buildIDValue(Map<String, Object> res) {
        Map<String, Object> resourceData = (Map<String, Object>) res.get("resource");
        String cveNumber = (String) res.get("name");
        String imageName = (String) res.get("image_name");
        String packageName = (String) resourceData.get("name");
        String version = (String) resourceData.get("version");
        String path = (String) resourceData.get("path");
        return cveNumber + "-" + imageName + "-" + packageName + "-" + version + "-" + path;
    }

}
