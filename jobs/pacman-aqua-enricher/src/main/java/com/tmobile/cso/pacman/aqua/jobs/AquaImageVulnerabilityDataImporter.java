package com.tmobile.cso.pacman.aqua.jobs;


import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.tmobile.cso.pacman.aqua.Constants;
import com.tmobile.cso.pacman.aqua.util.ElasticSearchManager;
import com.tmobile.cso.pacman.aqua.util.HttpUtil;
import com.tmobile.cso.pacman.aqua.util.Util;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AquaImageVulnerabilityDataImporter extends AquaDataImporter implements Constants {


  protected static final String AQUA_CLIENT_DOMAIN_URL = System.getProperty("aqua_client_domain_url");
  protected static final int DEFAULT_PAGE_SIZE = Integer.parseInt(System.getProperty("default_page_size"));
  protected static final String AQUA_IMAGE_VULNERABILITY_API_QUERY_PARAMS = System.getProperty("aqua_image_vul_query_params");

  private static Logger log = LoggerFactory.getLogger(AquaImageVulnerabilityDataImporter.class);

  /**
   * The Constant index.
   */
  private final static String index = "aqua-image-vulnerability";

  /**
   * The Constant type.
   */
  private final static String type = "vulnerability";

  /**
   * The Constant docid.
   */
  private final static String docid = "idKey";


  public Map<String, Object> execute() {
    String token = getBearerToken();
    getAndUploadVulnerabilityDataToES(token);
    System.out.println(token);
    return null;
  }

  private void getAndUploadVulnerabilityDataToES(String token) {
    try {
      int currentPage = 1;
      boolean isLastPage = false;
      Gson gson = Util.getJsonBuilder();
      do {
        String pagination = "&page=" + currentPage + "&pagesize=" + DEFAULT_PAGE_SIZE;
        String vulnerabilityURI = AQUA_CLIENT_DOMAIN_URL +
            apiMap.get("image_vulnerabilities") +
            URL_SEPARATOR +
            AQUA_IMAGE_VULNERABILITY_API_QUERY_PARAMS +
            pagination;
        Map<String, Object> response = gson.fromJson(HttpUtil.get(vulnerabilityURI, token), Map.class);
        Double currentCount = (Double) response.get("page") * (Double) response.get("pagesize");
        if (currentCount >= (Double) response.get("count")) {
          isLastPage = true;
        }
        synchronized (response) {
          uploadToES((List<Map<String, Object>>) response.get("result"));
        }
        currentPage++;
      }
      while (!isLastPage);
    } catch (Exception e) {
      log.error("exception while collecting aqua VM Vulnerability Data {}", e);
    }
  }

  private void uploadToES(List<Map<String, Object>> result) {

    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd"));
    List<Map<String, Object>> vulnDetails = new ArrayList<>();
    try {
      synchronized (vulnDetails) {
        for (Map<String, Object> res : result) {
          String idValue = buildIDValue(res);
          res.putIfAbsent("idKey", idValue);
          vulnDetails.add(res);
        }
      }
      ElasticSearchManager.createIndex(index);
      ElasticSearchManager.createType(index, type);
      ElasticSearchManager.uploadData(index, type, vulnDetails, docid);
    }
    catch (Exception e){
      log.error("exception while persisting aqua VM Vulnerability Data to ES {}", e);
    }
  }

  private String buildIDValue(Map<String, Object> res) {
    Map<String, Object> resourceData = (Map<String, Object>) res.get("resource");
    String cveNumber = (String) res.get("name");
    String imageName = (String) res.get("image_name");
    String packageName = (String) resourceData.get("name");
    String version = (String) resourceData.get("version");
    String path = (String) resourceData.get("path");
    return cveNumber + "-" + imageName + "-" + packageName + "-" + version + "-" + path;
  }
}
