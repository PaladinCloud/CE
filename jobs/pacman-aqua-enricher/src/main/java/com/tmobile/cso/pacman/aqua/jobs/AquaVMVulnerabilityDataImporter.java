package com.tmobile.cso.pacman.aqua.jobs;


import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.tmobile.cso.pacman.aqua.Constants;
import com.tmobile.cso.pacman.aqua.dto.ImageVulnerabilityResponse;
import com.tmobile.cso.pacman.aqua.dto.Result;
import com.tmobile.cso.pacman.aqua.exception.AquaDataImportException;
import com.tmobile.cso.pacman.aqua.util.ElasticSearchManager;
import com.tmobile.cso.pacman.aqua.util.ErrorManageUtil;
import com.tmobile.cso.pacman.aqua.util.HttpUtil;
import com.tmobile.cso.pacman.aqua.util.Util;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AquaVMVulnerabilityDataImporter extends AquaDataImporter implements Constants {


  protected static final String AQUA_CLIENT_DOMAIN_URL = System.getProperty("aqua_client_domain_url");
  protected static final int DEFAULT_PAGE_SIZE = Integer.parseInt(System.getProperty("default_page_size"));
  protected static final String AQUA_VM_VULNERABILITY_API_QUERY_PARAMS = System.getProperty("aqua_vm_vul_query_params");

  private static Logger log = LoggerFactory.getLogger(AquaVMVulnerabilityDataImporter.class);

  /** The Constant index. */
  private final static String index = "aqua-vm-vulnerability";

  /** The Constant type. */
  private final static String type = "vulnerability";

  /** The Constant docid. */
  private final static String docid = "name";

  private static List<Map<String,String>> errorList = new ArrayList<>();

  @SuppressWarnings("unchecked")
  public Map<String, Object> execute() {
    String token = null;
    try {
      token = getBearerToken();
      getAndUploadVulnerabilityData(token);
    } catch (AquaDataImportException e) {
      log.error("exception while collecting aqua VM Vulnerability Data", e);
      Map<String,String> errorMap = new HashMap<>();
      errorMap.put(ERROR, "Error in exception while collecting aqua VM Vulnerability Data");
      errorMap.put(ERROR_TYPE, FATAL);
      errorMap.put(EXCEPTION, e.getMessage());
      errorList.add(errorMap);
    }
    return ErrorManageUtil.formErrorCode(errorList);
  }

  private void getAndUploadVulnerabilityData(String token) {
    try {
      int currentPage = 1;
      boolean isLastPage = false;
      Gson gson = Util.getJsonBuilder();
      do {
        String pagination = "&page=" + currentPage + "&pagesize=" + DEFAULT_PAGE_SIZE;
        String vulnerabilityURI = AQUA_CLIENT_DOMAIN_URL +
            apiMap.get("vm_vulnerabilities") +
            URL_SEPARATOR +
            AQUA_VM_VULNERABILITY_API_QUERY_PARAMS +
            pagination;
        ImageVulnerabilityResponse response = gson.fromJson(HttpUtil.get(vulnerabilityURI, token), ImageVulnerabilityResponse.class);
        int currentCount = response.getPage() * response.getPagesize();
        if (currentCount >= response.getCount()) {
          isLastPage = true;
        }
        uploadToES(response);
         currentPage++;
      }
      while (!isLastPage);
    } catch (Exception e) {
      log.error("exception while collecting aqua VM Vulnerability Data", e);
      Map<String,String> errorMap = new HashMap<>();
      errorMap.put(ERROR, "Error in exception while collecting aqua VM Vulnerability Data");
      errorMap.put(ERROR_TYPE, FATAL);
      errorMap.put(EXCEPTION, e.getMessage());
      errorList.add(errorMap);
    }
  }

  private String uploadToES(ImageVulnerabilityResponse response) {
    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd"));
    List<Map<String, Object>> vulnDetails = new ArrayList<>();
    synchronized (vulnDetails) {
      response.getResult().stream().forEach(vuln ->
      vulnDetails.add(objectMapper.convertValue(vuln, Map.class)));
    }
    ElasticSearchManager.createIndex(index);
    ElasticSearchManager.createType(index, type);
    ElasticSearchManager.uploadData(index, type, vulnDetails, docid);
    return null;
  }
}
