/*******************************************************************************
 * Copyright 2022 Paladin Cloud, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package com.tmobile.cso.pacman.aqua.jobs;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.tmobile.cso.pacman.aqua.Constants;
import com.tmobile.cso.pacman.aqua.dto.ImageVulnerabilityResponse;
import com.tmobile.cso.pacman.aqua.exception.AquaDataImportException;
import com.tmobile.cso.pacman.aqua.util.ElasticSearchManager;
import com.tmobile.cso.pacman.aqua.util.ErrorManageUtil;
import com.tmobile.cso.pacman.aqua.util.HttpUtil;
import com.tmobile.cso.pacman.aqua.util.Util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AquaFunctionVulnerabilityDataImporter extends AquaDataImporter {

    private static Logger log = LoggerFactory.getLogger(AquaFunctionVulnerabilityDataImporter.class);

    private final static String AQUA_FUNCTION_VULNERABILITY = "aqua-function-vulnerability";
    private final static String TYPE = "vulnerability";
    private final static String DOC_ID = "name";

    private static List<Map<String, String>> errorList = new ArrayList<>();

    @SuppressWarnings("unchecked")
    public Map<String, Object> execute() {
        try {
            String token = getBearerToken();
            getAndUploadVulnerabilityData(token);
        } catch (AquaDataImportException e) {
            log.error("Error fetching aqua data ", e);
            Map<String, String> errorMap = new HashMap<>();
            errorMap.put(Constants.ERROR, "Error fetching aqua scan results");
            errorMap.put(Constants.ERROR_TYPE, Constants.FATAL);
            errorMap.put(Constants.EXCEPTION, e.getMessage());
            errorList.add(errorMap);
        }

        return ErrorManageUtil.formErrorCode(errorList);
    }

    private void getAndUploadVulnerabilityData(String token) throws AquaDataImportException {
        try {
            int currentPage = 1;
            boolean isLastPage = false;
            Gson gson = Util.getJsonBuilder();
            String aquaVmVulQueryParams = System.getProperty("aqua_vm_vul_query_params");
            do {
                String pagination = "&page=" + currentPage + "&pagesize=" + getDefaultPageSize();
                String vulnerabilityURI = aquaClientDomainUrl +
                        apiMap.get("vm_vulnerabilities") +
                        "?" +
                        aquaVmVulQueryParams +
                        pagination;
                ImageVulnerabilityResponse response = gson.fromJson(HttpUtil.get(vulnerabilityURI, token), ImageVulnerabilityResponse.class);
                int currentCount = response.getPage() * response.getPagesize();
                if (currentCount >= response.getCount()) {
                    isLastPage = true;
                }
                uploadToES(response);
                currentPage++;
            }
            while (!isLastPage);
        } catch (ParseException e) {
            throw new AquaDataImportException(e.getMessage());
        } catch (Exception e) {
            throw new AquaDataImportException(e.getMessage());
        }
    }

    private void uploadToES(ImageVulnerabilityResponse response) throws AquaDataImportException {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            objectMapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd"));
            List<Map<String, Object>> vulnDetails = new ArrayList<>();
            synchronized (vulnDetails) {
                response.getResult().stream().forEach(vuln ->
                        vulnDetails.add(objectMapper.convertValue(vuln, Map.class)));
            }

            ElasticSearchManager.createIndex(AQUA_FUNCTION_VULNERABILITY);
            ElasticSearchManager.uploadData(AQUA_FUNCTION_VULNERABILITY, TYPE, vulnDetails, DOC_ID);
        } catch (Exception e) {
            throw new AquaDataImportException(e.getMessage());
        }
    }

}
