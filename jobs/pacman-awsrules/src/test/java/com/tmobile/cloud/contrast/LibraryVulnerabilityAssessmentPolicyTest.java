/*******************************************************************************
 *  Copyright 2023 Paladin Cloud, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not
 *  use this file except in compliance with the License.  You may obtain a copy
 *  of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 *  License for the specific language governing permissions and limitations under
 *  the License.
 ******************************************************************************/
package com.tmobile.cloud.contrast;

import com.tmobile.cloud.contrastrules.library.LibraryVulnerabilityAssessmentPolicy;
import com.tmobile.pacman.commons.PacmanSdkConstants;
import com.tmobile.pacman.commons.exception.InvalidInputException;
import com.tmobile.pacman.commons.policy.PolicyResult;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.powermock.modules.junit4.PowerMockRunner;

import java.util.HashMap;
import java.util.Map;

@RunWith(PowerMockRunner.class)
public class LibraryVulnerabilityAssessmentPolicyTest {

    @InjectMocks
    LibraryVulnerabilityAssessmentPolicy policy;

    Map<String, String> commonMap;

    @Before
    public void setUp() {
        commonMap = getMapString();
    }

    @Test
    public void executeSuccessTest() {
        commonMap.put("vulns", "[{\"name\":\"CVE-2018-14721\",\"description\":\"test\",\"authentication\":\"None\"," +
                "\"references\":[],\"visible\":true,\"severityToUse\":\"CRITICAL\",\"access_vector\":\"Network\"," +
                "\"access_complexity\":\"Low\",\"availability_impact\":\"Partial\"," +
                "\"confidentiality_impact\":\"Partial\",\"integrity_impact\":\"Partial\",\"severity_value\":7.5," +
                "\"severity_code\":\"HIGH\",\"cvss_3_vector\":\"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H\"," +
                "\"cvss_3_severity_value\":10,\"cvss_3_severity_code\":\"CRITICAL\"," +
                "\"has_cvss3_score\":true,\"has_cve\":true}]");
        PolicyResult result = policy.execute(commonMap, commonMap);
        Assert.assertEquals(result.getStatus(), PacmanSdkConstants.STATUS_FAILURE);
    }

    @Test
    public void executeSuccessNoMediumTest() {
        commonMap.put("severityToCheck", "medium");
        commonMap.put("vulns", "[{\"name\":\"CVE-2018-14721\",\"description\":\"test\",\"authentication\":\"None\"," +
                "\"references\":[],\"visible\":true,\"severityToUse\":\"CRITICAL\",\"access_vector\":\"Network\"," +
                "\"access_complexity\":\"Low\",\"availability_impact\":\"Partial\"," +
                "\"confidentiality_impact\":\"Partial\",\"integrity_impact\":\"Partial\",\"severity_value\":7.5," +
                "\"severity_code\":\"HIGH\",\"cvss_3_vector\":\"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H\"," +
                "\"cvss_3_severity_value\":10,\"cvss_3_severity_code\":\"CRITICAL\"," +
                "\"has_cvss3_score\":true,\"has_cve\":true}]");
        PolicyResult result = policy.execute(commonMap, commonMap);
        Assert.assertEquals(result.getStatus(), PacmanSdkConstants.STATUS_SUCCESS);
    }

    @Test
    public void executeSuccessNoVulnsTest() {
        PolicyResult result = policy.execute(commonMap, commonMap);
        Assert.assertEquals(result.getStatus(), PacmanSdkConstants.STATUS_SUCCESS);
    }

    @Test(expected = InvalidInputException.class)
    public void executeFailTest() {
        commonMap.remove("policyCategory");
        policy.execute(commonMap, commonMap);
    }

    public Map<String, String> getMapString() {
        Map<String, String> commonMap = new HashMap<>();
        commonMap.put("executionId", "1234");
        commonMap.put("_resourceid", "12345");
        commonMap.put("severity", "critical");
        commonMap.put("policyCategory", "security");
        commonMap.put("accountid", "12345");
        commonMap.put("severityToUse", "critical");
        commonMap.put("severityToCheck", "critical");
        return commonMap;
    }
}
