package com.tmobile.cloud.awsrules.ecr;


import com.tmobile.cloud.awsrules.utils.CommonTestUtils;
import com.tmobile.cloud.awsrules.utils.PacmanUtils;
import com.tmobile.pacman.commons.policy.Annotation;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.*;
import static org.mockito.Matchers.any;
import static org.powermock.api.mockito.PowerMockito.mockStatic;
import static org.powermock.api.mockito.PowerMockito.when;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ PacmanUtils.class, Annotation.class})

public class ImagesWithSeverityVulnerabilityRuleTest {


  @InjectMocks
  ImagesWithSeverityVulnerabilityRule imagesWithSeverityVulnerabilityRule;

  @Test
  public void executeTest() throws Exception {
    mockStatic(PacmanUtils.class);
    mockStatic(Annotation.class);
    when(PacmanUtils.doesAllHaveValue(anyString(),anyString(),anyString())).thenReturn(
        true);
    when(PacmanUtils.formatUrl(anyObject(),anyString())).thenReturn("host");


    when(PacmanUtils.checkImageIdFromElasticSearchForAqua(anyString(),anyString(),anyString(),anyString())).thenReturn(CommonTestUtils.getListObject("123"));
    when(Annotation.buildAnnotation(anyMap(), any())).thenReturn(new Annotation());
    assertThat(imagesWithSeverityVulnerabilityRule.execute(CommonTestUtils.getMapString("r_123 "),CommonTestUtils.getAquaResource()), is(notNullValue()));


  }

  @Test
  public void getHelpTextTest(){
    assertThat(imagesWithSeverityVulnerabilityRule.getHelpText(), is(nullValue()));
  }
}
