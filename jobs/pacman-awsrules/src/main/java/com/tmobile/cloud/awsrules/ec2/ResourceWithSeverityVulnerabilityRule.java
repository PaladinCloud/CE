/*******************************************************************************
 * Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
/**
  Copyright (C) 2017 T Mobile Inc - All Rights Reserve
  Purpose:
  Author :u55262
  Modified Date: Mar 08, 2018
  
 **/
package com.tmobile.cloud.awsrules.ec2;

import java.util.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.tmobile.cloud.awsrules.ec2.model.CveDetails;
import com.tmobile.cloud.awsrules.ec2.model.QualysVulnerabilityinfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;

import com.amazonaws.util.StringUtils;
import com.tmobile.cloud.awsrules.utils.PacmanUtils;
import com.tmobile.cloud.constants.PacmanRuleConstants;
import com.tmobile.pacman.commons.PacmanSdkConstants;
import com.tmobile.pacman.commons.exception.InvalidInputException;
import com.tmobile.pacman.commons.exception.RuleExecutionFailedExeption;
import com.tmobile.pacman.commons.policy.Annotation;
import com.tmobile.pacman.commons.policy.BasePolicy;
import com.tmobile.pacman.commons.policy.PacmanPolicy;
import com.tmobile.pacman.commons.policy.PolicyResult;

@PacmanPolicy(key = "check-for-resource-with-severity-vulnerabilities", desc = "If an EC2 instance or vm having severity (S5,S4,S3) vulnerability then report it as an issue with severity High", severity = PacmanSdkConstants.SEV_HIGH, category = PacmanSdkConstants.SECURITY)
public class ResourceWithSeverityVulnerabilityRule extends BasePolicy {

	private static final Logger logger = LoggerFactory.getLogger(ResourceWithSeverityVulnerabilityRule.class);

	/**
	 * The method will get triggered from Rule Engine with following parameters
	 * 
	 * @param ruleParam
	 * 
	 **************Following are the Rule Parameters********* <br><br>
	 * 
	 *  ruleKey : check-for-resource-with-severity-vulnerabilities <br><br>
	 *
	 *  esResourceWithVulnInfoForSeverityUrl : Enter the EC2 or vm with Vuln info ES API <br><br>
	 *
	 *  severityVulnValue : Enter the severity level such as S5,S4 or S3 <br><br>
	 *
	 * @param resourceAttributes this is a resource in context which needs to be scanned this is provided by execution engine
	 *
	 */

	public PolicyResult execute(final Map<String, String> ruleParam, Map<String, String> resourceAttributes) {
		logger.debug("========ResourcewithSeverityVulnerabilityRule started=========");
		Annotation annotation = null;
		String instanceId = null;

		String severity = ruleParam.get(PacmanRuleConstants.SEVERITY);
		String category = ruleParam.get(PacmanRuleConstants.CATEGORY);
		String resourceWithVulnInfoForSeverityUrl = null;
		String severityVulnValue = ruleParam.get(PacmanRuleConstants.SEVERITY_VULN);
		
		String formattedUrl = PacmanUtils.formatUrl(ruleParam,PacmanRuleConstants.ES_RESOURCE_WITH_VULN_INFO_SEVERITY_URL);
        
        if(!StringUtils.isNullOrEmpty(formattedUrl)){
        	resourceWithVulnInfoForSeverityUrl =  formattedUrl;
        }

		MDC.put("executionId", ruleParam.get("executionId")); 
		MDC.put("ruleId", ruleParam.get(PacmanSdkConstants.POLICY_ID)); 
		
		List<LinkedHashMap<String,Object>>issueList = new ArrayList<>();
		LinkedHashMap<String,Object>issue = new LinkedHashMap<>();

		if (!PacmanUtils.doesAllHaveValue(resourceWithVulnInfoForSeverityUrl, severityVulnValue,severity,category)) {
			logger.info(PacmanRuleConstants.MISSING_CONFIGURATION);
			throw new InvalidInputException(PacmanRuleConstants.MISSING_CONFIGURATION);
		}

		if (resourceAttributes != null) {
			String entityType = resourceAttributes.get(PacmanRuleConstants.ENTITY_TYPE);
			instanceId = StringUtils.trim(resourceAttributes.get(PacmanRuleConstants.RESOURCE_ID));
			try {
				List<String> violationTitle  = PacmanUtils.getSeverityVulnerabilitiesByInstanceId(instanceId,resourceWithVulnInfoForSeverityUrl, severityVulnValue);
				JsonArray severityList = PacmanUtils.getSeverityVulnerabilitiesArray(instanceId,resourceWithVulnInfoForSeverityUrl, severityVulnValue);
				if (severityList!=null && !severityList.isEmpty()) {
					String severityDetails = getQualysVulnerabilitiesDetails(severityList);
					annotation = Annotation.buildAnnotation(ruleParam,Annotation.Type.ISSUE);
					annotation.put(PacmanSdkConstants.DESCRIPTION,entityType+" instance with vulnerability "+ severityVulnValue + " found!!");
					annotation.put(PacmanRuleConstants.SEVERITY, severity);
					annotation.put(PacmanRuleConstants.CATEGORY, category);
					annotation.put("vulnerabilityDetails", severityDetails);
					issue.put(PacmanRuleConstants.VIOLATION_REASON, entityType+" instance with vulnerability "+ severityVulnValue + " found!!");
					issue.put("violation_title", String.join(",", violationTitle));
					issueList.add(issue);
					annotation.put("issueDetails",issueList.toString());
					//annotation.put("qualysIssueDetails", String.join(",", severityDetails.toString()));
					logger.debug("========ResourcewithSeverityVulnerabilityRule ended with an annotation {} : =========", annotation);
					return new PolicyResult(PacmanSdkConstants.STATUS_FAILURE,PacmanRuleConstants.FAILURE_MESSAGE, annotation);

				}
			} catch (Exception e) {
				logger.error("error", e);
				throw new RuleExecutionFailedExeption(e.getMessage());
			}

		}
		logger.debug("========ResourcewithSeverityVulnerabilityRule ended=========");
		return new PolicyResult(PacmanSdkConstants.STATUS_SUCCESS,PacmanRuleConstants.SUCCESS_MESSAGE);
	}

	public String getHelpText() {
		return "This rule checks for an EC2 Instance or VM having severity (S5,S4,S3) vulnerability if so reports it as an issue with severity High";
	}

	private static String getQualysVulnerabilitiesDetails(JsonArray vulnerabilities) {
		List<QualysVulnerabilityinfo> vulnerabilityList=new ArrayList<>();
		if(vulnerabilities!=null){
			for (int i = 0; i < vulnerabilities.size(); i++) {
				JsonObject source = vulnerabilities.get(i).getAsJsonObject().get(PacmanRuleConstants.SOURCE)
						.getAsJsonObject();
				QualysVulnerabilityinfo vulnerabilityinfo=new QualysVulnerabilityinfo();
				String title=source.get("title").getAsString();
				vulnerabilityinfo.setTitle(title);
				JsonObject cveList = source.get("cvelist").getAsJsonObject();
				List<CveDetails> cveDeytailsList=new ArrayList<>();
				if(cveList!=null){
					populateCveList(cveList, cveDeytailsList);
				}
				vulnerabilityinfo.setCveList(cveDeytailsList);
				vulnerabilityList.add(vulnerabilityinfo);
			}
		}
		ObjectMapper objectMapper = new ObjectMapper();
		try {
			return objectMapper.writeValueAsString(vulnerabilityList);
		} catch (JsonProcessingException e) {
			throw new RuleExecutionFailedExeption(e.getMessage());
		}

	}

	private static void populateCveList(JsonObject cveList, List<CveDetails> cveDeytailsList) {
		JsonArray cveArray= cveList.get("cve").getAsJsonArray();
		if(cveArray!=null){
			for (int j = 0; j < cveArray.size(); j++) {
				String id = cveArray.get(j).getAsJsonObject().get(PacmanRuleConstants.ID).getAsString();
				String url = cveArray.get(j).getAsJsonObject().get(PacmanRuleConstants.URL).getAsString();
				CveDetails cveDetails=new CveDetails(id,url);
				cveDeytailsList.add(cveDetails);
			}
		}
	}

}
