/*
 *Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use
 * this file except in compliance with the License. A copy of the License is located at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */


import {throwError as observableThrowError,  Observable } from 'rxjs';
/**
 * @type Service
 * @desc erro handling, this service is used to log errors, log info for debugging, log silent javascript errors.
 * @author Puneet Baser
 */


import { Injectable  } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { LoggerService } from './logger.service';
import { UtilsService } from './utils.service';
import { EXPECTATION_FAILED, SERVICE_UNAVAILABLE, NOT_FOUND } from 'http-status-codes';

@Injectable()
export class ErrorHandlingService {

    constructor(private loggerService: LoggerService, private util: UtilsService) {
    }

    /* To check the status of API response */
    /* To deprecate this function */
    checkAPIResponseStatus(responseData) {
        const APIStatus = {
            'dataAvailble': !this.util.checkIfAPIReturnedDataIsEmpty(responseData)
        };
        return APIStatus;
    }

    handleAPIError(error: any): Observable<any> {
        /* This fucntion is to handle errors generated by API. */
        // Report it to logger
        this.loggerService.log('info', '***Inside handleAPIError API error, error is:***');
        this.loggerService.log('error', error);

        let errorMessage;
        const httpStatusCode = error.status;

        this.loggerService.log('error', 'http status code - ' + httpStatusCode);

        switch (httpStatusCode) {
            case EXPECTATION_FAILED:
                errorMessage = 'apiResponseError';
                break;
            case SERVICE_UNAVAILABLE:
                errorMessage = 'apiResponseError';
                break;
            case NOT_FOUND:
                errorMessage = 'noDataAvailable';
                break;
            case 0:
                // Show user a way to handle certificate issue
                errorMessage = 'apiResponseError';
                this.loggerService.log('error', 'Certificate issue has occured');
                break;
            default:
                errorMessage = 'apiResponseError';
          }

        return observableThrowError(errorMessage);
    }

    handleJavascriptError(error: any) {
        /* This fucntion is to handle erros generated by Javascript */
        // Report it to logger
        this.loggerService.log('info', '***Inside javascript error, error is: ***');
        this.loggerService.log('error', error);
        return 'jsError';
    }

    throwError(error: any): Promise<any> {
        return Promise.reject(error.message || error);
    }
}
