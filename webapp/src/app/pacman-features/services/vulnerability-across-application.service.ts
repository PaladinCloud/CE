/*
 *Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use
 * this file except in compliance with the License. A copy of the License is located at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Created by sauravdutta on 11/10/17.
 */
import { Observable } from 'rxjs';
import { Injectable } from '@angular/core';

import { HttpService } from '../../shared/services/http-response.service';
import { ErrorHandlingService } from '../../shared/services/error-handling.service';
import { map } from 'rxjs/operators';

@Injectable()
export class VulnerabilityAcrossApplicationService {

    constructor(
                private httpService: HttpService,
                private errorHandling: ErrorHandlingService) { }

    getData(queryParams, VulnerabilityAcrossApplicationUrl, VulnerabilityAcrossApplicationMethod): Observable<any> {

        const url = VulnerabilityAcrossApplicationUrl;
        const method = VulnerabilityAcrossApplicationMethod;
        const payload = {};
        try {
            return this.httpService.getHttpResponse(url, method, payload, queryParams)
                    .pipe(map(response => {
                        this.dataCheck(response);
                        return this.massageData(response);
                    }));
        } catch (error) {
            this.errorHandling.handleJavascriptError(error);
        }
    }

    getpolicyEnv(queryParams, PolicyAcrossApplicationUrl, PolicyAcrossApplicationMethod): Observable<any> {
        const url = PolicyAcrossApplicationUrl;
        const method = PolicyAcrossApplicationMethod;
        const payload = {};
        try {
            return this.httpService.getHttpResponse(url, method, payload, queryParams)
                    .pipe(map(response => {
                        this.dataCheck(response);
                        return this.massageData(response);
                    }));
        } catch (error) {
            this.errorHandling.handleJavascriptError(error);
        }
    }

    dataCheck(data) {
        const APIStatus = this.errorHandling.checkAPIResponseStatus(data);
        if (!APIStatus.dataAvailble) {
            throw new Error('noDataAvailable');
        }
    }

    massageData(data): any {
        /**
         * here goes the massaging the data to a desired format
         * the format is described in mockdata */
        const tablebodyData = data.response;
        const jsonObjOuter = [];
        tablebodyData.forEach((elementOut , indexOut) => {
            const eachElement = elementOut;
            let appName;
            const jsonObjInner = [];
            eachElement.severityinfo.forEach((elementInside , indexInside) => {
            // if count value is 0 add nodata
            if (elementInside.count === undefined) {
              elementInside.count = 'nodata';
            }
            jsonObjInner.push({
              'count' : elementInside.count,
              'severity' : elementInside.severity,
            });
          });
                /**
               * this is the final object for table
               */

              if (elementOut.application === undefined) {
                appName = elementOut.environment;
              } else {
                appName = elementOut.application;
              }
          /**
           * sort the json obj based on which column has to be shown first
           */
          jsonObjInner.sort(function(a, b) {
            const x = a.severity < b.severity ? -1 : 1;
            return x;
          });
          /**
           * this is the final object for table
           */
          jsonObjOuter.push({
            'AppName' : appName,
            'S3' : jsonObjInner[0].count,
            'S4' : jsonObjInner[1].count,
            'S5' : jsonObjInner[2].count,
            'AppDetails' : [{
              'CountType' : jsonObjInner[0].severity,
              'count' : jsonObjInner[0].count
            },
            {
              'CountType' : jsonObjInner[1].severity,
              'count' : jsonObjInner[1].count
            },
            {
              'CountType' : jsonObjInner[2].severity,
              'count' : jsonObjInner[2].count
            }]
          });
        });
        jsonObjOuter.forEach(element => {
            element.AppDetails.forEach(details => {
                element[details.CountType] = details.count;
            });
        });
        return jsonObjOuter;
    }
}
