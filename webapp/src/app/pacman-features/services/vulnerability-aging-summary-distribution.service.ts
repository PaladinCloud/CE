/*
 *Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use
 * this file except in compliance with the License. A copy of the License is located at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Injectable, Inject } from '@angular/core';
import { Observable } from 'rxjs';

import { HttpService } from '../../shared/services/http-response.service';
import { ErrorHandlingService } from '../../shared/services/error-handling.service';
import orderBy from 'lodash/orderBy';
import { map } from 'rxjs/operators';

@Injectable()
export class VulnerabilityAgingSummaryDistributionService {
    getMethod: any;
    constructor(@Inject(HttpService) private httpService: HttpService,
                private errorHandling: ErrorHandlingService) { }

    getData(tableUrl, tableMethod, payload, queryParam): Observable<any> {
        const url = tableUrl;
        const method = tableMethod;
        const queryParams = queryParam;
        this.getMethod = tableMethod;
        try {
            return this.httpService.getHttpResponse(url, method, payload, queryParams)
                    .pipe(map(response => {
                        return this.massageData(response);
                    }));
        } catch (error) {
            this.errorHandling.handleJavascriptError(error);
        }
    }

/* Functions to modify response for Vulnerability distribution */

massageData(data) {
  const updatedData = this.changeVulnerabilityCountLabel(data);
  const result = {};
    Object.keys(updatedData).forEach((eachTypeOfData) => {
      let i = 0;
      let mergedArray = [];
      while (i < updatedData[eachTypeOfData].length) {
        mergedArray = this.mergeByProperty(mergedArray, updatedData[eachTypeOfData][i], 'name');
        i++;
      }
      result[eachTypeOfData] = mergedArray;
    });
    return result;
  }

  changeVulnerabilityCountLabel(data) {
    const result = {};
    data.map(eachSeverityObject => {
      const severityCountLabel = 'S' + eachSeverityObject.severity + ' - Days';
      eachSeverityObject.distribution.map(eachDistributionType => {
        // sort data as per days
        eachDistributionType.data = orderBy(eachDistributionType.data, ['days'], ['desc']);
        if (!result[eachDistributionType.type]) {
          result[eachDistributionType.type] = [];
        }
        result[eachDistributionType.type].push(eachDistributionType.data);
        eachDistributionType.data.map(eachValue => {
          eachValue[severityCountLabel] = eachValue.days;
          delete eachValue.days;
        return eachValue;
        });
        return eachDistributionType;
      });
      return eachSeverityObject;
    });
    return result;
  }

  mergeByProperty(arr1, arr2, prop) {
      arr2.forEach(function(arr2obj) {
          const arrObj = arr1.find(function(arr1obj) {
              return arr1obj[prop] === arr2obj[prop];
          });
          // If the object already exist extend it with the new values from arr2, otherwise just add the new object to arr1
          arrObj ? Object.assign(arrObj, arr2obj) : arr1.push(arr2obj);
      });
    return arr1;
  }
}
