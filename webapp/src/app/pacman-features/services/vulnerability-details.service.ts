/*
 *Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use
 * this file except in compliance with the License. A copy of the License is located at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Injectable, Inject } from '@angular/core';
import { Observable } from 'rxjs';

import { HttpService } from '../../shared/services/http-response.service';
import { LoggerService } from '../../shared/services/logger.service';
import { ErrorHandlingService } from '../../shared/services/error-handling.service';
import { UtilsService } from '../../shared/services/utils.service';
import { map } from 'rxjs/operators';

@Injectable()
export class VulnerabilityDetailsService {
    getMethod: any;
    constructor(@Inject(HttpService) private httpService: HttpService,
                private logger: LoggerService,
                private errorHandling: ErrorHandlingService,
            private utilsService: UtilsService) { }

    getData(tableUrl, tableMethod, payload, queryParam): Observable<any> {

        const url = tableUrl;
        const method = tableMethod;
        const queryParams = queryParam;
        this.getMethod = tableMethod;
        try {
            return this.httpService.getHttpResponse(url, method, payload, queryParams)
                    .pipe(map(response => {
                        return this.massageData(response);
                    }));
        } catch (error) {
            this.errorHandling.handleJavascriptError(error);
        }
    }

    massageData(data) {
       this.editDetailsData(data);
       this.mergeGeneralInfoAndDetailsData(data);
       this.createTableData(data);
       return data;
    }

    editDetailsData(data) {
        try {
            for (let i = 0; i < data.length; i++) {
                if (data[i].name.toLowerCase() === 'details') {
                    if (data[i].attributes['Vendor Reference']) {
                        if (data[i].attributes['Vendor Reference'].length > 0) {
                            const attrData = data[i].attributes['Vendor Reference'];
                            data[i].attributes['Vendor Reference'] = '<div> <a target="_blank" href=' + attrData[0].url + '>' + attrData[0].id + '</a> </div>';
                            for (let j = 1; j < Object.keys(attrData).length - 1; j++) {
                                data[i].attributes['Vendor Reference'] =   data[i].attributes['Vendor Reference'] + '' + '<div><a target="_blank" href=' + attrData[j].url + '>' + attrData[j].id + '</a></div>';
                            }
                        } else {
                            delete data[i].attributes['Vendor Reference'];
                        }
                    }
                    if (data[i].attributes['CVE ID']) {
                        if (data[i].attributes['CVE ID'].length > 0) {
                            const attrData = data[i].attributes['CVE ID'];
                            data[i].attributes['CVE ID'] = '<div><a target="_blank" href=' + attrData[0].url + '>' + attrData[0].id + '</a></div>';
                            for (let j = 1; j < Object.keys(attrData).length - 1; j++) {
                                data[i].attributes['CVE ID'] = data[i].attributes['CVE ID'] + '' + '<div><a target="_blank" href=' + attrData[j].url + '>' + attrData[j].id + '</a></div>';
                            }
                        } else {
                            delete data[i].attributes['CVE ID'];
                        }
                    }

                    if (data[i].attributes['Bugtraq ID']) {
                        if (data[i].attributes['Bugtraq ID'].length > 0) {
                            const attrData = data[i].attributes['Bugtraq ID'];
                            data[i].attributes['Bugtraq ID'] = '<div><a target="_blank" href=' + attrData[0].url + '>' + attrData[0].id + '</a></div>';
                            for (let j = 1; j < Object.keys(attrData).length - 1; j++) {
                                data[i].attributes['Bugtraq ID'] = data[i].attributes['Bugtraq ID'] + '' + '<div><a target="_blank" href=' + attrData[j].url + '>' + attrData[j].id + '</a></div>';
                            }
                        } else {
                            delete data[i].attributes['Bugtraq ID'];
                        }
                    }
                    return;
                }
            }
        }catch (error) {
            this.logger.log('error', error);
        }
    }

    mergeGeneralInfoAndDetailsData(data) {
        try {
            let detailsAttr;
            for (let i = 0; i < data.length; i++) {
                data[i].name = data[i].name.toLowerCase();
                if (data[i].name.toLowerCase() === 'general information' || data[i].name.toLowerCase() === 'general info') {
                    data[i].name = 'general info';
                }
                if (data[i].name.toLowerCase() === 'details') {
                    detailsAttr = data[i].attributes;
                }
            }
            for (let i = 0; i < data.length; i++) {
                if (data[i].name.toLowerCase() === 'general info') {
                    Object.assign(data[i].attributes, detailsAttr);
                    // remove obj having not values.
                    const info_obj = data[i].attributes;
                    for (const key in info_obj) {
                        if (info_obj[key] == null || info_obj[key] === undefined || info_obj[key].length==0 || info_obj[key].equals({}) || info_obj[key] === '') {
                          delete info_obj[key];
                        }
                    }
                    // format Data and Time
                    if (info_obj['Service Modified']) {
                        info_obj['Service Modified'] = this.utilsService.calculateDateAndTime(info_obj['Service Modified']);
                    }
                    if (info_obj['Published']) {
                        info_obj['Published'] = this.utilsService.calculateDateAndTime(info_obj['Published']);
                    }
                    return;
                }
            }
        } catch (error) {
            this.logger.log('error', error);
        }

    }

    createTableData(data) {
        try {
            for (let i = 0; i < data.length; i++) {
                if (data[i].name.toLowerCase() === 'software') {
                    const obj = data[i].attributes;
                    let th = '<tr>';
                    for (let j = 0; j < Object.keys(obj[0]).length; j++) {
                        th = th + '<th>' + Object.keys(obj[0])[j] + '</th>';
                    }
                    const header = th + '</tr>';
                    let tbody = header;
                    for (let k = 0; k < Object.keys(obj).length; k++) {
                        let td = '<tr>';
                        for (let j = 0; j < Object.values(obj[k]).length; j++ ) {
                                td =  td + '<td>' + Object.values(obj[k])[j] + '</td>';
                        }
                        const tData = td + '</tr>';
                        tbody = tbody + tData;
                    }
                    data[i].attributes = tbody;
                    return;
                }
            }
        } catch (error) {
                this.logger.log('error', error);
        }
    }

}
