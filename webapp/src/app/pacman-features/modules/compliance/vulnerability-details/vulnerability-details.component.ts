/*
 *Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use
 * this file except in compliance with the License. A copy of the License is located at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Component, OnInit, Output, EventEmitter, OnDestroy } from '@angular/core';
import {ActivatedRoute, Router} from '@angular/router';
import {Subscription} from 'rxjs';
import {WorkflowService} from '../../../../core/services/workflow.service';
import {LoggerService} from '../../../../shared/services/logger.service';
import {FilterManagementService} from '../../../../shared/services/filter-management.service';
import {ErrorHandlingService} from '../../../../shared/services/error-handling.service';
import {AssetGroupObservableService} from '../../../../core/services/asset-group-observable.service';
import {DomainTypeObservableService} from '../../../../core/services/domain-type-observable.service';
import {UtilsService} from '../../../../shared/services/utils.service';
import {RouterUtilityService} from '../../../../shared/services/router-utility.service';
import {environment} from './../../../../../environments/environment';
import {VulnerabilityDetailsService} from '../../../services/vulnerability-details.service';

@Component({
  selector: 'app-vulnerability-details',
  templateUrl: './vulnerability-details.component.html',
  styleUrls: ['./vulnerability-details.component.css'],
  providers: [VulnerabilityDetailsService]
})
export class VulnerabilityDetailsComponent implements OnInit, OnDestroy {

  assetGroupSubscription: Subscription;
  domainSubscription: Subscription;
  pageTitle = 'Vulnerability Details';
  breadcrumbDetails = {
    breadcrumbArray: ['Compliance', 'All Vulnerabilities'],
    breadcrumbLinks: ['compliance-dashboard', 'vulnerabilities'],
    breadcrumbPresent: 'Vulnerability Details'
  };
  backButtonRequired: boolean;
  pageLevel = 0;
  errorMessage: string;
  agAndDomain = {};
  errorValue = 0;
  @Output() errorOccurred = new EventEmitter();
  tabsName= ['general info', 'software', 'threat',
   'impact', 'solution', 'exploitability', 'malware'];
  tabsData: any;
  selectedTab: any;
  selectedTabData: any;
  qid: any;
  vulnerabilityTitle: string;
  search: any;
  error_messages = {
    'general info': {
      'description': 'No Information found for this vulnerability'
    },
    'software': {
      'description': 'No Software found for this vulnerability'
    },
    'threat': {
      'description': 'No Threat found for this vulnerability'
    },
    'impact': {
      'description': 'No Impact found for this vulnerability'
    },
    'solution': {
      'description': 'No Solution found for this vulnerability'
    },
    'exploitability': {
      'description': 'No Exploitability found for this vulnerability'
    },
    'malware': {
      'description': 'No Malware is associated for this vulnerability'
    }
  };

  isFilterRquiredOnPage = false;
  appliedFilters = {
    queryParamsWithoutFilter: {}, /* Stores the query parameter ibject without filter */
    pageLevelAppliedFilters: {} /* Stores the query parameter ibject without filter */
  };
  filterArray = []; /* Stores the page applied filter array */
  private dataSubscription: Subscription;
  constructor(
    private router: Router,
    private activatedRoute: ActivatedRoute,
    private workflowService: WorkflowService,
    private logger: LoggerService,
    private filterManagementService: FilterManagementService,
    private errorHandling: ErrorHandlingService,
    private assetGroupObservableService: AssetGroupObservableService,
    private domainObservableService: DomainTypeObservableService,
    private utils: UtilsService,
    private routerUtilityService: RouterUtilityService,
    private vulnerabilityDetailsService: VulnerabilityDetailsService) {
    this.subscribeToAssetGroup();
    this.subscribeToDomain();
  }

  ngOnInit() {
  }

  subscribeToAssetGroup() {
    this.assetGroupSubscription = this.assetGroupObservableService.getAssetGroup().subscribe(assetGroup => {
      if (assetGroup) {
        this.backButtonRequired = this.workflowService.checkIfFlowExistsCurrently(this.pageLevel);
        this.agAndDomain['ag'] = assetGroup;
      }
      this.reset();
      this.init();
      this.updateComponent();
    });
  }

  subscribeToDomain() {
    this.domainSubscription = this.domainObservableService.getDomainType().subscribe(domain => {
      if (domain) {
        this.agAndDomain['domain'] = domain;
      }
    });
  }

  reset() {
    /* Reset the page */
    this.filterArray = [];
  }

  init() {
    /* Initialize */
    this.routerParam();
  }

  updateComponent() {
    /* Updates the whole component */
    this.getData();
  }

  routerParam() {
    try {
      const urlSegment = this.routerUtilityService.getPageUrlSegmentFromSnapshot(this.router.routerState.snapshot.root);
      if (urlSegment) {
        this.qid = urlSegment[urlSegment.length - 1].path;
      }
      const currentQueryParams = this.routerUtilityService.getQueryParametersFromSnapshot(this.router.routerState.snapshot.root);
      if (currentQueryParams) {
        this.appliedFilters.queryParamsWithoutFilter = JSON.parse(JSON.stringify(currentQueryParams));
        delete this.appliedFilters.queryParamsWithoutFilter['filter'];
        this.appliedFilters.pageLevelAppliedFilters = this.utils.processFilterObj(currentQueryParams);
        this.filterArray = this.filterManagementService.getFilterArray(this.appliedFilters.pageLevelAppliedFilters);
      }
    } catch (error) {
      this.errorMessage = this.errorHandling.handleJavascriptError(error);
      this.logger.log('error', error);
    }
  }

  updateUrlWithNewFilters(filterArr) {
    this.appliedFilters.pageLevelAppliedFilters = this.utils.arrayToObject(
        this.filterArray,
        'filterkey',
        'value'
    ); // <-- TO update the queryparam which is passed in the filter of the api
    this.appliedFilters.pageLevelAppliedFilters = this.utils.makeFilterObj(this.appliedFilters.pageLevelAppliedFilters);

    /**
     * To change the url
     * with the deleted filter value along with the other existing paramter(ex-->tv:true)
     */

    const updatedFilters = Object.assign(
      this.appliedFilters.pageLevelAppliedFilters,
      this.appliedFilters.queryParamsWithoutFilter
    );

    /*
     Update url with new filters
     */

    this.router.navigate([], {
      relativeTo: this.activatedRoute,
      queryParams: updatedFilters
    }).then(success => {
      this.routerParam();
    });
  }

  navigateBack() {
    try {
      this.workflowService.goBackToLastOpenedPageAndUpdateLevel(this.router.routerState.snapshot.root);
    } catch (error) {
      this.logger.log('error', error);
    }
  }

  ngOnDestroy() {
    try {
      if (this.assetGroupSubscription) {
        this.assetGroupSubscription.unsubscribe();
      }
      if (this.domainSubscription) {
        this.domainSubscription.unsubscribe();
      }
      if (this.dataSubscription) {
        this.dataSubscription.unsubscribe();
      }
    } catch (error) {
      this.logger.log('error', 'JS Error - ' + error);
    }
  }

  /* specific functionalities for this page */
  getData() {
    try {
    if (this.dataSubscription) {
      this.dataSubscription.unsubscribe();
    }
    const payload = {};
    const queryParam = {
      'qid': this.qid
    };
    this.errorValue = 0;
    const url = environment.vulnerabilityQidDetails.url;
    const method = environment.vulnerabilityQidDetails.method;
    this.dataSubscription = this.vulnerabilityDetailsService.getData(url, method, payload, queryParam).subscribe(
      response => {
      try {
        if (this.utils.checkIfAPIReturnedDataIsEmpty(response)) {
          this.errorOccurred.emit();
          this.errorValue = -1;
          this.errorMessage = 'noDataAvailable';
        } else {
          this.errorValue = 1;
          this.processGraphData(response);
        }
      } catch (e) {
        this.errorOccurred.emit();
        this.errorValue = -1;
        this.errorMessage = 'jsError';
        this.logger.log('error', e);
      }
    },
    error => {
      this.errorOccurred.emit();
      this.errorValue = -1;
      this.errorMessage = 'apiResponseError';
      this.logger.log('error', error);
    });
  } catch (error) {
    this.logger.log('error', error);
  }
  }

  processGraphData(data) {
    try {
      this.tabsData = data;
      this.vulnerabilityTitle = this.extractVulnerabilityTitle(this.tabsData);
      let i = 0;
      while (i < this.tabsName[i].length) {
        if (this.tabsName[i].toLowerCase() === this.tabsData[0].name.toLowerCase()) {
          this.selectedTab = JSON.parse(JSON.stringify(this.tabsData[0]));
          this.selectedTabData = Object.keys(this.selectedTab.attributes);
          if (this.selectedTabData && this.selectedTabData.length === 0) {
            this.errorValue = 2;
            this.selectedTab.attributes = '';
            this.selectedTabData = '';
          }
          return;
        }
        i++;
      }
    } catch (error) {
      this.logger.log('error', error);
    }
  }

  extractVulnerabilityTitle(data) {
    try {
      const generalInfo = data.filter(obj => obj.name.toLowerCase() === 'general info');
      if (generalInfo && generalInfo[0].attributes) {
        return generalInfo[0].attributes.Title;
      }
    } catch (error) {
      this.logger.log('error', 'js error - ' + error);
    }
  }

  getselectedTabData() {
    this.errorValue = 1;
    try {
      for (let i = 0; i < this.tabsData.length; i++) {
        if ((this.selectedTab.name.toLowerCase() === 'exploitability' ||
          this.selectedTab.name.toLowerCase() === 'malware') &&
          this.selectedTab.name.toLowerCase() === this.tabsData[i].name.toLowerCase()) {
          this.selectedTab = JSON.parse(JSON.stringify(this.tabsData[i]));
          this.selectedTabData = Object.values(this.selectedTab.attributes);
          if (this.selectedTabData && this.selectedTabData.length === 0) {
            this.errorValue = 2;
            this.selectedTab.attributes = '';
            this.selectedTabData = '';
          }
          return;
        } else if (this.selectedTab.name.toLowerCase() === this.tabsData[i].name.toLowerCase()) {
          this.selectedTab = JSON.parse(JSON.stringify(this.tabsData[i]));
          this.selectedTabData = Object.keys(this.selectedTab.attributes);
          if (this.selectedTabData && this.selectedTabData.length === 0) {
            this.errorValue = 2;
            this.selectedTab.attributes = '';
            this.selectedTabData = '';
          }
          return;
        }
      }
      this.selectedTab.attributes = '';
      this.selectedTabData = '';
      this.errorOccurred.emit();
      this.errorValue = 2;
      this.errorMessage = 'dataTableMessage';
    } catch (error) {
      this.logger.log('error', error);
    }
   }
}
