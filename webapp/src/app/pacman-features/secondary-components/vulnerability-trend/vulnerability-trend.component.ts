/*
 *Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use
 * this file except in compliance with the License. A copy of the License is located at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Component, OnInit, ViewEncapsulation, OnDestroy, ViewChild, ElementRef} from '@angular/core';
import {AssetGroupObservableService} from '../../../core/services/asset-group-observable.service';
import {VulnerabilityTrendService} from '../../services/vulnerability.service';
import {environment} from './../../../../environments/environment';
import {Subscription} from 'rxjs';
import {SelectComplianceDropdown} from '../../services/select-compliance-dropdown.service';

@Component({
    selector: 'app-vulnerability-trend',
    templateUrl: './vulnerability-trend.component.html',
    styleUrls: ['./vulnerability-trend.component.css'],
    providers: [VulnerabilityTrendService],
    encapsulation: ViewEncapsulation.None,
    // eslint-disable-next-line
    host: {
        '(window:resize)': 'onResize($event)'
    }
})
export class VulnerabilityTrendComponent implements OnInit, OnDestroy {

    @ViewChild('vulnerabilityHistoryContainer') widgetContainer: ElementRef;

    selectedAssetGroup: string;
    private assetGroupSubscription: Subscription;
    private getVulnerabilitySubscription: Subscription;
    private onFiltersChange: Subscription;
    trendData: any;

    graphWidth: any;
    graphData: any;
    dataLoaded: any = false;
    error: any = false;
    loading: any = false;
    errorMessage: any = 'apiResponseError';
    yAxisLabel = 'Number of Open Vulnerabilities';
    showGraphLegend = false;
    filtersObject = {};

    constructor(
                private assetGroupObservableService: AssetGroupObservableService,
                private vulnerabilityTrendService: VulnerabilityTrendService,
                private selectComplianceDropdown: SelectComplianceDropdown
            ) {

        this.assetGroupSubscription = this.assetGroupObservableService.getAssetGroup().subscribe(
            assetGroupName => {
                this.selectedAssetGroup = assetGroupName;
                this.init();
            });


        this.onFiltersChange = this.selectComplianceDropdown.getCompliance().subscribe((filtersObject) => {
            this.filtersObject = filtersObject;
            this.init();
        });
    }

    onResize() {
        const element = document.getElementById('vulnerabilityTrend');
        if (element) {
            this.graphWidth = parseInt((window.getComputedStyle(element, null).getPropertyValue('width')).split('px')[0], 10);
        }
    }

    getIssues() {

        if (this.getVulnerabilitySubscription) { this.getVulnerabilitySubscription.unsubscribe(); }

        const vulnerabilityUrl = environment.vulnerabilityTrend.url;
        const vulnerabilityMethod = environment.vulnerabilityTrend.method;
        const dateData = new Date();
        const prevDate = new Date();
        prevDate.setMonth(prevDate.getMonth() - 1);
        let fromDay;
        fromDay = prevDate.toISOString().split('T')[0];
        const payload = {
            'ag': this.selectedAssetGroup,
            'filter': this.filtersObject,
            'from': fromDay,
            'to': dateData
        };

        this.getVulnerabilitySubscription = this.vulnerabilityTrendService.getData(payload, vulnerabilityUrl, vulnerabilityMethod).subscribe(
            response => {
                try {
                    this.setDataLoaded();
                    this.graphData = response;

                    if (this.graphData.length === 0 ) {
                        this.setError('noDataAvailable');
                    }

                } catch (error) {
                    this.setError('jsError');
                }
            },
            error => {
                this.setError('apiResponseError');
            }
        );
    }

    getData() {
        this.getIssues();
    }

    init() {
        this.setDataLoading();
        this.getData();
    }

    setDataLoaded() {
        this.dataLoaded = true;
        this.error = false;
        this.loading = false;
    }

    setDataLoading() {
        this.dataLoaded = false;
        this.error = false;
        this.loading = true;
    }

    setError(message?: any) {
        this.dataLoaded = false;
        this.error = true;
        this.loading = false;
        if (message) {
            this.errorMessage = message;
        }
    }

    ngOnInit() {
        this.graphWidth = parseInt(window.getComputedStyle(this.widgetContainer.nativeElement, null).getPropertyValue('width'), 10);
        this.init();
    }

    ngOnDestroy() {
        try {
            this.assetGroupSubscription.unsubscribe();
            this.getVulnerabilitySubscription.unsubscribe();
            this.onFiltersChange.unsubscribe();
        } catch (error) {

        }
    }

}
