/*
 *Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use
 * this file except in compliance with the License. A copy of the License is located at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Component, OnInit, Inject, OnDestroy } from '@angular/core';
import { Subscription ,  Observable } from 'rxjs';
import { AutorefreshService } from '../../services/autorefresh.service';
import { environment } from './../../../../environments/environment';
import { LoggerService } from '../../../shared/services/logger.service';
import { ErrorHandlingService } from '../../../shared/services/error-handling.service';
import { AssetGroupObservableService } from '../../../core/services/asset-group-observable.service';
import { HttpService } from '../../../shared/services/http-response.service';
import { UtilsService } from '../../../shared/services/utils.service';
import { map } from 'rxjs/operators';

@Component({
  selector: 'app-vulnerability-aging-graph',
  templateUrl: './vulnerability-aging-graph.component.html',
  styleUrls: ['./vulnerability-aging-graph.component.css'],
  providers: [ AutorefreshService, LoggerService, ErrorHandlingService]
})
export class VulnerabilityAgingGraphComponent implements OnInit, OnDestroy {

  selectedAssetGroup: string;
  public errorMessage = 'apiResponseError';
  private dataSubscription: Subscription;
  private subscriptionToAssetGroup: Subscription;

  errorValue = 0;
  public graphData: any = [];
  private legend_text: any;

  constructor(
  private assetGroupObservableService: AssetGroupObservableService,
  private logger: LoggerService,
  private errorHandling: ErrorHandlingService,
  private utilsService: UtilsService,
  @Inject(HttpService) private httpService: HttpService) {
    this.subscriptionToAssetGroup = this.assetGroupObservableService.getAssetGroup().subscribe(
      assetGroupName => {
          this.selectedAssetGroup = assetGroupName;
          this.updateComponent();
      });
   }

  ngOnInit() {
    this.updateComponent();
  }

  updateComponent() {
    this.getData();
  }

  getData() {

    if (this.dataSubscription) {
      this.dataSubscription.unsubscribe();
    }

    const payload = {};
    const queryParam = {
      'ag': this.selectedAssetGroup
    };
    this.errorValue = 0;

    const url = environment.vulnerabilityAgingSummary.url;
    const method = environment.vulnerabilityAgingSummary.method;

    this.dataSubscription = this.getHTTPData(url, method, payload, queryParam).subscribe(
      response => {
      try {
        if (this.utilsService.checkIfAPIReturnedDataIsEmpty(response)) {
          this.errorValue = -1;
          this.errorMessage = 'vulnerabilityMessage';
        } else {
          this.errorValue = 1;
          this.processGraphData(response);
        }

      } catch (e) {
        this.errorValue = -1;
        this.errorMessage = 'jsError';
        this.logger.log('error', e);
      }
    },
    error => {
      this.errorValue = -1;
      this.errorMessage = 'apiResponseError';
      this.logger.log('error', error);
    });
  }

  processGraphData(data): void {

    const barColor = ['#FFB00D', '#F75C03', '#D40325'];
    let i = 0;
      data.forEach(element => {
        if (element['severity']) {
          element['x_domain'] = element['severity'];
          delete element['severity'];
        }
        if (element['days']) {
          element['y_domain'] = element['days'];
          delete element['days'];
        }
        element['bar_color'] = barColor[i];
        i++;
      });
      const legend = {
        y_axis: 'Age (days)',
        x_axis: 'Severities'
      };
      this.graphData = data;
      this.legend_text = legend;
  }

  onResize() {
    this.updateComponent();
  }

  // assign error values...

  getErrorValues(message?: any ): void {
    this.errorValue = -1;
    if (message) {
      this.errorMessage = message;
    }
  }

  getHTTPData(tableUrl, tableMethod, payload, queryParam): Observable<any> {

    const url = tableUrl;
    const method = tableMethod;
    const queryParams = queryParam;

    try {
        return this.httpService.getHttpResponse(url, method, payload, queryParams)
                .pipe(map(response => {
                    return response;
                }));
    } catch (error) {
        this.errorHandling.handleJavascriptError(error);
    }

  }

  ngOnDestroy() {
    try {
      if (this.subscriptionToAssetGroup) {
        this.subscriptionToAssetGroup.unsubscribe();
      }
      if (this.dataSubscription) {
        this.dataSubscription.unsubscribe();
      }
    } catch (error) {
      this.logger.log('error', '--- Error while unsubscribing ---');
    }
  }

}
