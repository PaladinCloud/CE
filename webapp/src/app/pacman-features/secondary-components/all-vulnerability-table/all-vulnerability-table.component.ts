/*
 *Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use
 * this file except in compliance with the License. A copy of the License is located at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  Component,
  OnInit,
  OnDestroy,
  OnChanges,
  SimpleChanges
} from '@angular/core';
import { Subscription } from 'rxjs';
import { DownloadService } from '../../../shared/services/download.service';
import { ToastObservableService } from '../../../post-login-app/common/services/toast-observable.service';
import { CommonResponseService } from '../../../shared/services/common-response.service';
import { AssetGroupObservableService } from '../../../core/services/asset-group-observable.service';
import { AutorefreshService } from '../../services/autorefresh.service';
import { environment } from './../../../../environments/environment';
import { LoggerService } from '../../../shared/services/logger.service';
import { ErrorHandlingService } from '../../../shared/services/error-handling.service';
import { SelectComplianceDropdown } from '../../services/select-compliance-dropdown.service';
import { WorkflowService } from '../../../core/services/workflow.service';
import { ActivatedRoute, Router } from '@angular/router';
import { UtilsService } from '../../../shared/services/utils.service';
import { RefactorFieldsService } from '../../../shared/services/refactor-fields.service';

@Component({
  selector: 'app-all-vulnerability-table',
  templateUrl: './all-vulnerability-table.component.html',
  styleUrls: ['./all-vulnerability-table.component.css'],
  providers: [CommonResponseService, AutorefreshService]
})

export class AllVulnerabilityTableComponent implements OnInit, OnChanges, OnDestroy {
  public somedata: any;
  public outerArr: any;
  public allColumns: any;

  selectedAssetGroup: string;
  public apiData: any;
  public applicationValue: any;
  public errorMessage: any;
  public dataComing = true;
  public showLoader = true;
  public tableHeaderData: any;

  private subscriptionToAssetGroup: Subscription;
  private onFiltersChange: Subscription;
  private dataSubscription: Subscription;
  private downloadSubscription: Subscription;

  public seekdata = false;
  durationParams: any;
  autoRefresh: boolean;
  totalRows = 0;
  bucketNumber = 0;
  currentBucket: any = [];
  popRows: any = ['Download Data'];
  firstPaginator = 1;
  paginatorSize = 10;
  dataTableData: any = [];
  tableDataLoaded = false;
  lastPaginator: number;
  currentPointer = 0;
  searchTxt: string;
  errorValue = 0;
  filtersObject = {};
  showGenericMessage = false;
  public pageLevel = 0;
  public backButtonRequired;

  pageTitle = 'All Vulnerabilities';

  constructor(
    private commonResponseService: CommonResponseService,
    private assetGroupObservableService: AssetGroupObservableService,
    private selectComplianceDropdown: SelectComplianceDropdown,
    private autorefreshService: AutorefreshService,
    private downloadService: DownloadService,
    private logger: LoggerService,
    private errorHandling: ErrorHandlingService,
    private toastObservableService: ToastObservableService,
    private workflowService: WorkflowService,
    private router: Router,
    private utils: UtilsService,
    private activatedRoute: ActivatedRoute,
    private refactorFieldsService: RefactorFieldsService
  ) {
    this.subscriptionToAssetGroup = this.assetGroupObservableService
      .getAssetGroup()
      .subscribe(assetGroupName => {
        this.selectedAssetGroup = assetGroupName;
        this.filtersObject = {};
        this.updateComponent();
      });
    this.onFiltersChange = this.selectComplianceDropdown
      .getCompliance()
      .subscribe(filtersObject => {
        this.filtersObject = filtersObject;
        this.updateComponent();
      });

    this.durationParams = this.autorefreshService.getDuration();
    this.durationParams = parseInt(this.durationParams, 10);
    this.autoRefresh = this.autorefreshService.autoRefresh;
  }

  ngOnInit() {
  }

  ngOnChanges(changes: SimpleChanges) {

  }

  updateComponent() {
    /* All functions variables which are required to be set for component to be reloaded should go here */
    this.showLoader = true;
    this.dataComing = false;
    this.tableDataLoaded = false;
    this.dataTableData = [];
    this.seekdata = false;
    this.errorValue = 0;
    this.showGenericMessage = false;
    this.getData();
  }

  getData() {
    if (this.selectedAssetGroup !== undefined) {
      /* All functions to get data should go here */
      this.getAllVulnerability();
    }
  }

  handlePopClick(rowText) {
    const fileType = 'csv';

    try {

      let queryParams;

      queryParams = {
        fileFormat: 'csv',
        serviceId: 6,
        fileType: fileType
      };

      const downloadRequest = {
        ag: this.selectedAssetGroup,
        filter: {},
        from: 0,
        searchtext: this.searchTxt,
        size: this.totalRows
      };

      const downloadUrl = environment.download.url;
      const downloadMethod = environment.download.method;

      this.downloadService
        .requestForDownload(
          queryParams,
          downloadUrl,
          downloadMethod,
          downloadRequest,
          this.pageTitle,
          this.totalRows
        );
    } catch (error) {
      this.logger.log('error', error);
    }
  }

  getAllVulnerability() {
    if (this.dataSubscription) {
      this.dataSubscription.unsubscribe();
    }
    const payload = {
      ag: this.selectedAssetGroup,
      filter: this.filtersObject,
      from: this.bucketNumber * this.paginatorSize,
      searchtext: this.searchTxt,
      size: this.paginatorSize
    };
    this.errorValue = 0;
    const allVulnerabilityUrl = environment.allVulnerability.url;
    const allVulnerabilityMethod = environment.allVulnerability.method;

    this.dataSubscription = this.commonResponseService
      .getData(allVulnerabilityUrl, allVulnerabilityMethod, payload, {})
      .subscribe(
        response => {
          this.showGenericMessage = false;
          try {
            this.errorValue = 1;
            this.showLoader = false;
            this.seekdata = false;

            this.tableDataLoaded = true;
            this.dataTableData = response.data.response;
            this.dataComing = true;
            if (response.data.response.length === 0) {
              this.errorValue = -1;
              this.outerArr = [];
              this.allColumns = [];
              this.totalRows = 0;
            }
            if (response.data.response.length > 0) {
              this.totalRows = response.data.total;
              this.firstPaginator = this.bucketNumber * this.paginatorSize + 1;
              this.lastPaginator =
                this.bucketNumber * this.paginatorSize + this.paginatorSize;

              this.currentPointer = this.bucketNumber;

              if (this.lastPaginator > this.totalRows) {
                this.lastPaginator = this.totalRows;
              }
              const updatedResponse = this.massageData(response.data.response);
              this.currentBucket[this.bucketNumber] = updatedResponse;
              this.processData(updatedResponse);
            }

          } catch (e) {
            this.errorValue = 0;
            this.errorMessage = this.errorHandling.handleJavascriptError(e);
            this.getErrorValues();
          }
        },
        error => {
          this.errorMessage = error;
          this.getErrorValues();
        }
      );
  }

  massageData(data) {

    /**
       * Added By Trinanjan  on 27/03/2017
       * @desc The funciton replaces keys of the table header data to a readable format
     */
    const refactoredService = this.refactorFieldsService;
    const newData = [];
    data.map(function (rowObj) {
      const KeysTobeChanged = Object.keys(rowObj);
      let newObj = {};
      KeysTobeChanged.forEach(element => {
        const elementnew =
          refactoredService.getDisplayNameForAKey(
            element.toLocaleLowerCase()
          ) || element;
        newObj = Object.assign(newObj, { [elementnew]: rowObj[element] });
      });
      newData.push(newObj);
    });
    return newData;
  }

  getErrorValues(): void {
    this.showGenericMessage = true;
    this.errorValue = -1;
    this.showLoader = false;
    this.dataComing = false;
    this.seekdata = true;
  }

  processData(data) {
    let innerArr = {};
    const totalVariablesObj = {};
    let cellObj = {};
    const magenta = '#336cc9';
    this.outerArr = [];
    const getData = data;

    const getCols = Object.keys(getData[0]);

    for (let row = 0; row < getData.length; row++) {
      innerArr = {};
      for (let col = 0; col < getCols.length; col++) {
        if (getCols[col] === '_resourceid') {
          cellObj = {
            link: '',
            properties: {
              color: magenta,
              'text-shadow': '0.1px 0',
              'text-transform': 'lowercase'
            },
            colName: getCols[col],
            hasPreImg: false,

            imgLink: '',
            text: getData[row][getCols[col]],
            valText: getData[row][getCols[col]]
          };
        } else if (getCols[col] === 'severity') {
          if (getData[row][getCols[col]] === 'S3') {
            cellObj = {
              link: '',
              properties: {
                color: '',
                'text-transform': 'capitalize'
              },
              colName: getCols[col],
              hasPreImg: true,
              imgLink: '',
              text: getData[row][getCols[col]],
              valText: getData[row][getCols[col]],
              statusProp: {
                'background-color': '#ffb00d'
              }
            };
          } else if (getData[row][getCols[col]] === 'S4') {
            cellObj = {
              link: '',
              properties: {
                color: '',
                'text-transform': 'capitalize'
              },
              colName: getCols[col],
              hasPreImg: true,
              imgLink: '',
              valText: getData[row][getCols[col]],
              text: getData[row][getCols[col]],
              statusProp: {
                'background-color': '#f75c03'
              }
            };
          } else {
            cellObj = {
              link: '',
              properties: {
                color: '',
                'text-transform': 'capitalize'
              },
              colName: getCols[col],
              hasPreImg: true,
              imgLink: '',
              text: getData[row][getCols[col]],
              valText: getData[row][getCols[col]],
              statusProp: {
                'background-color': '#e60127'
              }
            };
          }
        } else if (getCols[col] === 'Assets Affected') {
          cellObj = {
            link: 'true',
            properties: {
              color: ''
            },
            colName: getCols[col],
            hasPreImg: false,
            imgLink: '',
            text: getData[row][getCols[col]],
            valText: getData[row][getCols[col]]
          };
        } else {
          cellObj = {
            link: '',
            properties: {
              color: ''
            },
            colName: getCols[col],
            hasPreImg: false,
            imgLink: '',
            text: getData[row][getCols[col]],
            valText: getData[row][getCols[col]]
          };
        }

        // innerArr.push(cellObj);
        innerArr[getCols[col]] = cellObj;
        totalVariablesObj[getCols[col]] = '';
      }
      this.outerArr.push(innerArr);
    }
    if (this.outerArr.length > getData.length) {
      const halfLength = this.outerArr.length / 2;
      this.outerArr = this.outerArr.splice(halfLength);
    }
    this.allColumns = Object.keys(totalVariablesObj);
  }

  prevPg() {
    this.currentPointer--;
    this.processData(this.currentBucket[this.currentPointer]);
    this.firstPaginator = this.currentPointer * this.paginatorSize + 1;
    this.lastPaginator =
      this.currentPointer * this.paginatorSize + this.paginatorSize;
  }

  nextPg() {
    if (this.currentPointer < this.bucketNumber) {
      this.currentPointer++;
      this.processData(this.currentBucket[this.currentPointer]);
      this.firstPaginator = this.currentPointer * this.paginatorSize + 1;
      this.lastPaginator =
        this.currentPointer * this.paginatorSize + this.paginatorSize;
      if (this.lastPaginator > this.totalRows) {
        this.lastPaginator = this.totalRows;
      }
    } else {
      this.bucketNumber++;
      this.getData();
    }
  }

  searchCalled(search) {
    this.searchTxt = search;
  }

  callNewSearch() {
    this.bucketNumber = 0;
    this.currentBucket = [];
    this.getData();
  }

  goToDetails(row) {
    try {
      const apiTarget = { TypeAsset: 'vulnerable' };

      this.workflowService.addRouterSnapshotToLevel(this.router.routerState.snapshot.root);
      if (row.col.toLowerCase() === 'assets affected') {
        const eachParams = { qid: row.row.qid.valText };
        let newParams = this.utils.makeFilterObj(eachParams);
        newParams = Object.assign(newParams, apiTarget);
        newParams['mandatory'] = 'qid';
        this.router.navigate(['../../', 'assets', 'asset-list'], {
          relativeTo: this.activatedRoute,
          queryParams: newParams,
          queryParamsHandling: 'merge'
        });
      }
    } catch (error) {
      this.errorMessage = this.errorHandling.handleJavascriptError(error);
      this.logger.log('error', error);
    }
  }

  ngOnDestroy() {
    try {
      this.subscriptionToAssetGroup.unsubscribe();
      this.dataSubscription.unsubscribe();
      this.onFiltersChange.unsubscribe();
    } catch (error) {
      this.errorMessage = this.errorHandling.handleJavascriptError(error);
      this.getErrorValues();
    }
  }
}
