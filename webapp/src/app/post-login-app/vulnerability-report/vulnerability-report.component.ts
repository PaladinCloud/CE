/*
 *Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use
 * this file except in compliance with the License. A copy of the License is located at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Component, OnInit } from '@angular/core';
import { AssetGroupObservableService } from '../../core/services/asset-group-observable.service';
import { Subscription } from 'rxjs';
import { ActivatedRoute, Router } from '@angular/router';
import { DataCacheService } from '../../core/services/data-cache.service';
import { LoggerService } from '../../shared/services/logger.service';
import { environment } from './../../../environments/environment';
import { AssetTilesService } from '../../core/services/asset-tiles.service';
import { CONFIGURATIONS } from './../../../config/configurations';

@Component({
  selector: 'app-vulnerability-report',
  templateUrl: './vulnerability-report.component.html',
  styleUrls: ['./vulnerability-report.component.css'],
  providers: []
})

export class VulnerabilityReportComponent implements OnInit {

  openWorkflow:boolean;
  assetGroupSubscription: Subscription;
  selectedAssetGroup;
  hideTrend: false;
  hideDistribution: false;
  hideStats: false;
  hideTables: false;
  today = {
    month: '',
    day: '',
    year: ''
  };
  agDetails = {
    name: '',
    position: ''
  };
  filterObj;
  cbModel = [true, true, true];
  applyModel = [true, true, true];
  severityFilter = 'S3, S4, S5';
  infoActive = true;
  printInfo = false;
  config;
  logoName;

  constructor (
    private assetGroupObservableService: AssetGroupObservableService,
    private router: Router,
    private activatedRoute: ActivatedRoute,
    private dataStore: DataCacheService,
    private loggerService: LoggerService,
    private assetTilesService: AssetTilesService ) {

      this.config = CONFIGURATIONS;

      this.assetGroupSubscription = this.assetGroupObservableService.getAssetGroup().subscribe(
      assetGroupName => {
          this.selectedAssetGroup = assetGroupName;
          this.updateComponent();
          this.hideTrend = false;
          this.hideDistribution = false;
          this.hideStats = false;
          this.hideTables = false;

      });

  }

  ngOnInit() {

    if (this.config && this.config.required && this.config.required.APP_NAME) {
      this.logoName = this.config.required.APP_NAME.toLowerCase() + '-color-text-logo.svg';
    } else {
      this.logoName = 'application-logo.svg';
    }

    const date = new Date();
    this.today.month = (date.getMonth() + 1).toString();
    this.today.day = date.getDate().toString();
    this.today.year = date.getFullYear().toString();

    this.filterObj = {
      'severity': '3,4,5'
    };
    this.severityFilter = 'S3, S4, S5';
    this.cbModel = [true, true, true];
  }

  updateSeverity() {
    let severityStr = '';
    this.severityFilter = '';
    this.hideTrend = false;
    this.hideDistribution = false;
    this.hideStats = false;
    this.hideTables = false;
    this.applyModel = JSON.parse(JSON.stringify(this.cbModel));
    for (let i = 0; i < this.cbModel.length; i++) {
      if (this.cbModel[i]) {
        severityStr = severityStr + (i + 3).toString() + ',';
        this.severityFilter = this.severityFilter + 'S' + (i + 3).toString() + ', ';
      }
    }
    severityStr = severityStr.slice(0, -1);
    this.severityFilter = this.severityFilter.slice(0, -2);
    if (!severityStr) {
      severityStr = '3,4,5';
      this.cbModel = [true, true, true];
      this.severityFilter = 'S3, S4, S5';
    }
    this.filterObj = {
      'severity': severityStr
    };
  }

  updateComponent() {

    this.assetTilesService
      .getAssetGroupDisplayName(this.selectedAssetGroup)
      .subscribe(
        response => {
          this.agDetails.name = response as string;
        },
        error => {
          this.loggerService.log(
            'error',
            'error in getting asset group display name - ' + error
          );
        }
      );
  }

  closeVulnModel(value?: string) {
    this.router.navigate(
      [
        // No relative path pagination
        {
          outlets: {
            modalBGMenu: null
          }
        }
      ],
      {
        relativeTo: this.activatedRoute.parent, // <-- Parent activated route
        queryParamsHandling: 'merge'
      }
    );
  }

  changeAssetGroup () {
    this.router.navigate(
      [
        { outlets:
          { modal:
            [ 'change-default-asset-group' ]
          }
        }
      ],
      {
        relativeTo: this.activatedRoute.parent,
        queryParamsHandling: 'merge',
        fragment: 'dtd-vulnerability'
        /*fragment: 'executive sponsor'*/
      }
    ).then(result => {
      this.loggerService.log('info', 'Opened navigation to cahnge asset group');
    },
    error => {
      this.loggerService.log('error', 'Error in navigation - to change asset group');
    });
  }

  downloadReport() {
    this.printInfo = false;
    window.print();
  }

  checkIfEqual() {
    if (JSON.stringify(this.cbModel) === JSON.stringify(this.applyModel)) {
      return true;
    } else {
      return false;
    }
  }

  catchInfoState(event) {
    this.infoActive = event;
  }

  onMouseEnterPrintIcon() {
    this.printInfo = true;
  }

  onMouseLeavePrintIcon() {
    this.printInfo = false;
  }

}
